#include <iostream>
 
using namespace std;
 
const int MX = 2e6+7;
 
int pi[MX];
 
int main(){
    string text, pattern;
    cin >> text >> pattern;
    string s = pattern + "+" + text;
    for(int i = 1; i < s.size(); i++){
        int j = pi[i-1];
        while(j > 0 and s[i] != s[j])
            j = pi[j-1];
        if(s[i] == s[j])
            j++;
        pi[i] = j;
    }
 
    int res = 0;
    for(int i = 0; i < s.size(); i++){
        if(pi[i] == pattern.size())
            res++;
    }
 
    cout << res;
    return 0;
 
 #include <iostream>
 
using namespace std;
 
typedef long long int ll;
 
const int MOD = 1e9+9;
const int P = 9973;
const int MX = 1e6+7;
 
ll ppow[MX];
ll pfx_hash[MX];
 
int res = 0;
 
int main(){
    string s, pattern;
    cin >> s >> pattern;
    ppow[0] = 1;
    for(int i = 1 ; i < MX; i++){
       ppow[i] = (ppow[i-1]*P)%MOD; 
    }
 
    ll pattern_hash = 0;
    for(int i = 0; i < pattern.size(); i++){
        pattern_hash = (pattern_hash + (pattern[i]-'a'+1)*ppow[i])%MOD;
    }
 
    for(int i = 0; i < s.size(); i++){
        pfx_hash[i+1] = (pfx_hash[i] + (s[i]-'a'+1)*ppow[i])%MOD;
    }
 
    for(int i = 0; i+pattern.size()-1 < s.size(); i++){
        int a = i, b = i+pattern.size();
        ll sub_hash = pfx_hash[b] - pfx_hash[a]+MOD;
        sub_hash %= MOD;
        if(sub_hash == (pattern_hash*ppow[a])%MOD){
            res++;
        }
    }
    cout << res << endl;
    return 0;
}

int p[MX];
 
int main(){
    string txt1, txt = "#";
    cin >> txt1;
    for(char c : txt1){
        string s{c};
        txt += s + "#";
    }
    txt = "^" + txt + "$";
    int l = 1, r = 1;
    for(int i = 1; i < txt.size(); i++){
        p[i] = max(0, min(r-i, p[l+r-i]));
        while(txt[i-p[i]] == txt[i+p[i]])
            p[i]++;
        if(i+p[i] > r){
            l = i-p[i];
            r = i+p[i];
        }
    }
    int maxi = 0;
    int imaxi;
    for(int i = 0; i < txt.size(); i++){
        if(p[i] > maxi){
            maxi = p[i];
            imaxi = i;
        }
    }
    string res = txt.substr(imaxi-maxi+1,maxi*2-1);
    for(auto c : res){
        if(c != '#')
            cout << c;
    }

