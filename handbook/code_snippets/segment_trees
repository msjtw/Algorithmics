void max_add(int a, int b, int val, int k=1, int x=0, int y=BASE-1){
    if(a <= x and y <= b){
        max_tree[k][1] += val;
        return;
    }
    max_tree[2*k][1] += max_tree[k][1];
    max_tree[2*k+1][1] += max_tree[k][1];
    max_tree[k][0] += max_tree[k][1];
    max_tree[k][1] = 0;
 
    int d = (x+y)/2;
    if(a <= d){
        max_add(a, b, val, 2*k, x, d);
        }
    if(b > d){
        max_add(a, b, val, 2*k+1, d+1, y);
    }
    max_tree[k][0] = max(max_tree[2*k+1][0] + max_tree[2*k+1][1], max_tree[2*k][0] + max_tree[2*k][1]);
 
}
 
ll max_query(int a, int b, int k=1, int x=0, int y=BASE-1){
    if(a <= x and y <= b){
        return max_tree[k][0] + max_tree[k][1];
    }
    max_tree[2*k][1] += max_tree[k][1];
    max_tree[2*k+1][1] += max_tree[k][1];
    max_tree[k][0] += max_tree[k][1];
    max_tree[k][1] = 0;
    int d = (x+y)/2;
    ll ret = -INF;
    if(a <= d){
        ret = max(ret, max_query(a, b, 2*k, x, d));
    }
    if(b > d){
        ret = max(ret, max_query(a, b, 2*k+1, d+1, y));
    }
    return ret;
}
 
void sum_add(int a, int b, int val, int k=1, int x=0, int y=BASE-1){
    if(a <= x and y <= b){
        sum_tree[k][1] += val;
        return;
    }
    sum_tree[2*k][1] += sum_tree[k][1];
    sum_tree[2*k+1][1] += sum_tree[k][1];
    sum_tree[k][0] += sum_tree[k][1]*(y-x+1);
    sum_tree[k][1] = 0;
    int d = (x+y)/2;
    if(a <= d){
        int w = (d <= b ? d : b)+1;
        w -= (x <= a ? a : x);
        sum_tree[k][0] += val*(w);
        sum_add(a, b, val, 2*k, x, d);
    }
    if(b > d){
        int w = (y <= b ? y : b)+1;
        w -= (d+1 <= a ? a : d+1);
        sum_tree[k][0] += val*(w);
        sum_add(a, b, val, 2*k+1, d+1, y);
    }
}
 
ll sum_query(int a, int b, int k=1, int x=0, int y=BASE-1){
    if(a <= x and y <= b){
        return sum_tree[k][0] + sum_tree[k][1]*(y-x+1);
    }
    sum_tree[2*k][1] += sum_tree[k][1];
    sum_tree[2*k+1][1] += sum_tree[k][1];
    sum_tree[k][0] += sum_tree[k][1]*(y-x+1);
    sum_tree[k][1] = 0;
    int d = (x+y)/2;
    ll ret = 0;
    if(a <= d){
        ret += sum_query(a, b, 2*k, x, d);
    }
    if(b > d){
        ret += sum_query(a, b, 2*k+1, d+1, y);
    }
    return ret;
}
int sal[2*BASE];
 
void add(int p, int val){
    p += BASE;
    sal[p] += val;
    while(p > 0){
        p >>= 1;
        sal[p] = sal[2*p] + sal[2*p+1];
    }
}
 
int query(int p, int q){
    int ret =0 ;
    p += BASE -1;
    q += BASE +1;
    while(p>>1 != q>>1){
        if(not(p&1)){
            ret += sal[p+1];
        }
        if(q&1){
            ret += sal[q-1];
        }
        p >>= 1;
        q >>= 1;
    }
    return ret;
}
